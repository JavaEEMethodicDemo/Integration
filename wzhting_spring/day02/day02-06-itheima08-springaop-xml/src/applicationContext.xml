<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
     <bean id="personDao" class="com.itheima08.spring.aop.xml.PersonDaoImpl"></bean>
     <bean id="transaction" class="com.itheima08.spring.aop.xml.Transaction"></bean>
     
     <aop:config>
     	<!-- 
     		切入点表达式
     			expression
     		   id是唯一标示
     	 -->
     	<aop:pointcut 
     		expression="execution(* com.itheima08.spring.aop.xml.PersonDaoImpl.*(..))" 
     		id="perform"/>
     	<!-- 
     		aop:aspect就代表一个切面
     	 -->
     	<aop:aspect ref="transaction">
     		<!-- 
     			前置通知
     				有一个参数JoinPoint   可写可不写
     				   通过该参数可以获取到连接点的信息
     				在目标方法执行之前执行
     		 -->
     		<!-- 
     		<aop:before method="beginTransaction" pointcut-ref="perform"/>
     		 -->
     		<!-- 
     			后置通知
     			     方法的参数为JoinPoint
     			     能够获取目标方法的返回值
     			  returning="val"
     			     val为形参
     			     如果目标方法抛出异常,后置通知将不再执行
     		 -->
     		<!-- 
     		<aop:after-returning method="commit" pointcut-ref="perform" returning="val"/>
     		 -->
     		<!-- 
     			异常通知
     				获取目标方法抛出的异常信息
     				throwing="ex"
     				  异常信息的形参
     		 -->
     		<aop:after-throwing method="throwingMethod" pointcut-ref="perform" throwing="ex"/>
     		<!-- 
     			最终通知
     			   无论目标方法是否抛出异常，最终通知都将执行,相当于finally部分
     		 -->
     		<aop:after method="finalyMethod" pointcut-ref="perform"/>
     		<!-- 
     			环绕通知
     				控制目标方法的执行
     		 -->
     		<aop:around method="aroundMethod" pointcut-ref="perform"/>
     	</aop:aspect>
     </aop:config>
</beans>